library ieee;
use ieee.std_logic_1164.all;
library work;
use work.Gates.all;

entity dataflow is 
     port(
        state : in std_logic_vector(4 downto 0);
        clk : in std_logic;
        rst : in std_logic;

        opcode : out std_logic_vector(15 downto 0);
        loopcondn: out std_logic_vector(15 downto 0);
        C , Z , eq: out std_logic_vector(15 downto 0)
    );
end entity;

architecture connection of dataflow is

    component alu is
        port(
            alu_A: in std_logic_vector(15 downto 0);
            alu_B: in std_logic_vector(15 downto 0);
            Cin: in std_logic;
            sel: in std_logic;
            enable: in std_logic;
            alu_out: out std_logic_vector(15 downto 0);
            Cout: out std_logic;
            Z: out std_logic
        );
    end component;

    component tempreg is
        port(
            regin : in std_logic_vector(15 downto 0); -- input value into the register
            regout : out std_logic_vector(15 downto 0); -- output the value stored in the register
            clk : in std_logic;
            rst : in std_logic;
            writevalue : in std_logic 
            );
    end component;

    component regfile is
        port(
            --to store the register number for each address
            RF_A1 : in std_logic_vector(2 downto 0);
            RF_A2 : in std_logic_vector(2 downto 0);
            RF_A3 : in std_logic_vector(2 downto 0);
            RF_D3 : in std_logic_vector(15 downto 0);
            reset : in std_logic;
            clk : in std_logic;
            writevalue : in std_logic;
            readvalue : in std_logic;
            D1o : out std_logic_vector(15 downto 0);
            D2o : out std_logic_vector(15 downto 0);
            PC : out std_logic_vector(15 downto 0)
        );
        end component;

        component mux is
        port ( I0, I1, C : in std_logic;
             Y : out std_logic
            );
        end component;

        component shifter7 is 
        port ( 
            a : in std_logic_vector(15 downto 0); 
            s : out std_logic_vector(15 downto 0);
            b2 : in std_logic
        );
        end component;

        component se7_16 is
        port(
            input: in std_logic_vector(5 downto 0);
            output: out std_logic_vector(15 downto 0)
        );
        end component;

        component se9_16 is
        port(
            input: in std_logic_vector(8 downto 0);
            output: out std_logic_vector(15 downto 0)
        );
        end component;

        component seq_extender is
        port(
            input: in std_logic_vector(8 downto 0);
		    output: out std_logic_vector(15 downto 0)
        );
        end component;
        
        component memory is 
        port(
            MemA : in std_logic_vector(15 downto 0);
            MemB : in std_logic_vector(15 downto 0);
            Memout : out std_logic_vector(15 downto 0);
            clk : in std_logic;
            rst : in std_logic;
            memenable : in std_logic
        );
        end component;

        component prienc is
        port( 
            inp: in std_logic_vector(7 downto 0);
		    outp: out std_logic_vector(2 downto 0);
		    loopcondn: out std_logic
        );
        end component;

        component decoder is
        port(
            input: in std_logic_vector(2 downto 0);
            output: out std_logic_vector(8 downto 0)
            );
        end component;
        
        component comparator is port(
            A : in std_logic_vector(15 downto 0); 
            B : in std_logic_vector(15 downto 0); 
            equal : out std_logic 
       );
		end component;

signal A1, A2, A3, D3, inMemA, inMemB, RFD1, RFD2,intr0, intr1, intr2, intr3,tr0o,tr1o,tr2o,tr3o, ALUo, irout, rfin, PC ,Bin: std_logic_vector(15 downto 0) := (others => '0');
signal enbl : std_logic_vector(7 downto 0) := "00000000";
signal carry, zero, alusel, readen : std_logic;

begin
Tempregister0: tempreg port map(regin => intr0, clk => clk, writevalue => enbl(0), rst => rst, regout => tr0o);
Tempregister1: tempreg port map(regin => intr1, clk => clk, writevalue => enbl(7), rst => rst, regout => tr1o);
Tempregister2: tempreg port map(regin => intr2, clk => clk, writevalue => enbl(6), rst => rst, regout => tr2o);
Tempregister3: tempreg port map(regin => intr3, clk => clk, writevalue => enbl(5), rst => rst, regout => tr3o);
ALUmachine : alu port map(alu_A => tr1o, alu_B => Bin, Cin => '0', enable => enbl(4), sel => alusel, alu_out => ALUo, Cout => carry, Z => zero);
Registerfile : regfile port map(RF_A2 => irout(8 downto 6),RF_A1 => A1, RF_A3 => A3, RF_D3 => rfin, writevalue => enbl(3), readvalue => readen, clk => clk, reset <= rst,  D1o  => intr1, D2o => intr2 , PC => cnt);
Instrucreg : tempreg port map(regin => Memo, clk => clk,writevalue => enbl(2), rst => rst, regout => irout);
Memory : memory port map(MemA => tro1, MemB => ALUo,clk => clk, rst => rst, memenable => enbl(1), Memout => Memo);
Signextender7bit : se7_16 port map(input => se7in, output => se7out);
Signextender9bit : se9_16 port map(input => se9in, output => se9out);
Shifter7bit : shifter7 port map(a => inshft, b => rfin);
PriorityEncoder : prienc port map(
                                    inp(7) => tr3o(0),
                                    inp(6) => tr3o(1),
                                    inp(5) => tr3o(2),
                                    inp(4) => tr3o(3),
                                    inp(3) => tr3o(4),
                                    inp(2) => tr3o(5),
                                    inp(1) => tr3o(6),
                                    inp(0) => tr3o(7), 
                                    outp => PEout, loopcondn => loopout
                                );
Decoder : decoder port map(input => decin, output => decout);
Comparer : comparator port map(A <= tr1o, B <= tr2o, equal <= eqcomp);

process(state, aluO, rd1, rd2)
	begin	
		case state is 
			when "00001" => 
				A1 <= "111";
                readen <= "1";
				MemA <= tro1;
                alu_A <= tro1;
                Bin <= "0000000000000001";
                intr0 <= ALUo;
				PC <= tr0o;
				enbl <= "1001101";
			when "00010" =>
				A1 <= irout(11 downto 9);
                A2 <= irout(8 downto 6);
                readen <= "1";
				enbl<= "1000110";
			when "00011" =>
				Bin <= tro2;
				if(carry = '0') then Cin <= '0';
				else Cin <= '1';
				end if;
				-- if (irout(1 downto 0) = "11") then aluB <= lso;
				aluB <= t2out;
				--end if;
                alusel <= irout(13);
                intr0 <= ALUo;
				enbl<= "00000101";
				readen <= '0';
			when "00100" =>
				A3 <= irout(5 downto 3);
				rfin <= tr0o;
				readen <= '0';
				enbl<= "00000101"; 
			when "00101" =>
                rfin <= PC;
                A3 <= "111";	
				readen <= '0';
				enbl<= "00001000"; 
			when "00110" =>
				A1 <= irout(11 downto 9);
                se9in <= irout(5 downto 0);
                intr3 <= se9out;
				readen <= '1';
				enbl<= "00100000";
			when "00111" =>
				alu_A <= tr1o;
				alu_B <= tr3o;
                intr0 <= ALUo;
				readen <= '0';
				enbl<= "00000001";
			when "01000" =>
                A3 <= irout(8 downto 6);
                rfin <= tr1o;
                readen <= '0';
                enbl<= "00000001";
			when "01001" =>
				se7in<= irout(8 downto 0);
                MemA <= tr1o;
				readen <= '0';
				enbl<= "01000000";
			when "01010" =>
                A1 <= "111";
				rfin <= tr1o ;
				A3 <= irout(11 downto 9);
                A2 <= irout(8 downto 6);
				PC <= tro2 ;
                readen <= '0';
				enbl<= "00100000";
			when "01011" =>
				A2 <= irout(8 downto 6);
                se9in <= irout(5 downto 0);
				readen <= '0';
				enbl<= "10000000"; 
			when "01100" =>
				MemA <= tr0o;
				intr1 <= Memo;
				readen <= '0';
				enbl<= "00001000"; 
			when "01101" =>
				rfin <= tro1;
                A3 <= irout(11 downto 9);
				enbl<= "10001000"; 
			when "01110" =>
				A1 <= irout(11 downto 9);
				readen <= '1';
				enbl<= "10001000";
			when "01111" =>
				se7in <= irout(8 downto 0);
                intr3 <= se7out;
                A1 <= irout(11 down to 9);
				alusel <= '0';
				Cin <= '0';
				readen <= '0';
				enbl<= "00001000"; 
			when "10000" =>
                A3 <= PEout;
                MemA <= tr1o;
                alu_A <= tr1o;
                Bin <= "0000000000000001";
                alusel <= "0";
                if(carry = '0') then Cin <= '0';
				else Cin <= '1';
                end if;
				intr0 <= ALUo;
                rfin <= Memo;

			when "10001" =>
                intr1 <= tr0o;
                decin <= PEout;
                se7in <= decout;
                alu_B <= tr3o;
                intr0 <= ALUo;
                
                
			when "10010" =>
                A2 <= PEout;
                MemB <= tr2o;
                MemA <= tr1o;
                alu_A <= tr1o;
                Bin <= "0000000000000001";
                alusel <= "0";
                if(carry = '0') then Cin <= '0';
				else Cin <= '1';
                end if;
                intr1 <= ALUo;


            when "10011" =>
                A1 <= "111";
                alu_A <= tr1o;
                se9in <= irout(5 downto 0);
                alu_B <= se9out;
                PC <= ALUo;

			when "10100" =>
				A1 <= "111";
                alu_A <= tr1o;
                rfin <= tr1o;
                A3 <= irout(11 downto 9);
                se7in <= irout(8 downto 0);
                alu_B <= se7out;
                PC <= ALUo;
            
            when "10101" =>
               intr3 <= tr0o;
		end case;
	end process;
	
	opcode <= irout(15 downto 12);
	condition <= irout(1 downto 0);
	C <= carry;
	Z <= zero;
	eq <=eqcomp;
    loopcondn <= loopout;
end architecture;